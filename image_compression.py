{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb1da9bb-8fe1-4ed3-b6e3-e2f7b0d59264",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import mercury as mr\n",
    "file = mr.File(label=\"File upload\", max_file_size=\"10MB\")\n",
    "print(f\"Uploaded file name: {file.filename}\")\n",
    "print(f\"Uploaded file path: {file.filepath}\")\n",
    "#if file.filepath is not None:\n",
    "#    with open(file.filepath, \"r\") as fin:\n",
    "#        print(fin.read())\n",
    "# Ask user for input image path\n",
    "image_path = file.filepath\n",
    "\n",
    "# Load the image\n",
    "try:\n",
    "    img = Image.open(image_path)\n",
    "except:\n",
    "    print(\"Error: Unable to open the image. Please check the file path.\")\n",
    "    exit()\n",
    "\n",
    "# Convert image to grayscale\n",
    "imggray = img.convert('LA')\n",
    "\n",
    "# Display original grayscale image\n",
    "plt.figure(figsize=(9, 6))\n",
    "plt.imshow(imggray)\n",
    "plt.title('Original Image (Grayscale)')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "# Convert image data into a numpy matrix\n",
    "imgmat = np.array(list(imggray.getdata(band=0)), float)\n",
    "imgmat.shape = (imggray.size[1], imggray.size[0])\n",
    "imgmat = np.matrix(imgmat)\n",
    "\n",
    "# Display grayscale image matrix\n",
    "plt.figure(figsize=(9, 6))\n",
    "plt.imshow(imgmat, cmap='gray')\n",
    "plt.title('Image Matrix')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "# Perform Singular Value Decomposition (SVD)\n",
    "U, sigma, V = np.linalg.svd(imgmat)\n",
    "\n",
    "# Reconstruct the image using different numbers of singular vectors\n",
    "max_n = min(imgmat.shape)  # Maximum number of singular vectors possible\n",
    "\n",
    "for i in range(1, max_n + 1, max_n//10):\n",
    "    reconstimg = np.matrix(U[:, :i]) * np.diag(sigma[:i]) * np.matrix(V[:i, :])\n",
    "    plt.figure(figsize=(9, 6))\n",
    "    plt.imshow(reconstimg, cmap='gray')\n",
    "    title = \"n = %s\" % i\n",
    "    plt.title(title)\n",
    "    plt.axis('off')\n",
    "    plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
